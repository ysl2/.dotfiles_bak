#!/bin/bash

# RESTORE DOTFILES
# ================
#
# NOTE: This script is used for linking `~/.dotfiles/${"${STOW}"_tags}/*` to home ('~/') folder
#
# NOTE: The script position must be `~/.dotfiles/${some_hidden_folder}/start.sh`
# e.g. `~/.dotfiles/.RESTORE-BY_JAVA/start.sh`
# The folder ${some_hidden_folder} must be a hidden folder!!!
#
# NOTE: All the unhidden folders in `~/.dotfiles/` will be considered as a "${STOW}" tag
# folder, and will be restored by "${STOW}".
# NOTE: specify "$1" to 'soft', to only delete the link file, instead of creating new folders.

# Set which version of stow to use:
STOW=stow
DOTFILES=~/.dotfiles-main
SOFT=soft

function _my_traverse() {
  if [[ -f "$1" ]]; then
    dot_file=$(pwd)/"$1"
    target_file="${HOME}"/${dot_file##${CUR_DIR}/${TEMP_DIR}/}
    target_dir=${target_file%/*}
    _my_link "${dot_file}" "${target_file}" "${target_dir}"
  elif [[ -d "$1" ]]; then
    cd "$1"
    for item in $(ls -A); do
      _my_traverse "${item}"
    done
    cd ..
  fi
}

# $1: dot_file
# $2: target_file
# $3: target_dir
function _my_link() {
  if [[ ! -e "$3" ]]; then
    echo "[create dir] "$3""
    mkdir -p "$3"
  fi
  if [[ -L "$2" ]]; then
    echo "[delete link] "$2""
    rm "$2"
  elif [[ -e "$2" ]]; then
    if [[ ! -e "${CONFLICT_DIR}"/conflict.sh ]]; then
      touch "${CONFLICT_DIR}"/conflict.sh
      chmod 777 "${CONFLICT_DIR}"/conflict.sh
    fi
    echo "rm -f "$2"" >>"${CONFLICT_DIR}"/conflict.sh
  fi
}

function _stow_all() {
  cd "${DOTFILES}"/.RESTORE
  # Create conflict dir
  CONFLICT_DIR=$(pwd)/assets
  if [[ ! -e ${CONFLICT_DIR} ]]; then
    mkdir -p "${CONFLICT_DIR}"
  fi
  if [[ -e "${CONFLICT_DIR}"/conflict.sh ]]; then
    rm "${CONFLICT_DIR}"/conflict.sh
  fi
  # jump to `~/.dotfiles` dir
  cd ..
  CUR_DIR=$(pwd)
  TEMP_DIR=''
  # remove previous links by "${STOW}"
  if [[ "$1" != "${SOFT}" ]]; then
    for item in $(ls "${CUR_DIR}"); do
      if [[ -d "${item}" ]]; then
        echo "["${STOW}" clear] "${item}""
        "${STOW}" -D "${item}"
      fi
    done
  fi
  for item in $(ls "${CUR_DIR}"); do
    if [[ -d "${item}" ]]; then
      TEMP_DIR="${item}"
      _my_traverse "${item}"
    fi
  done
  if [[ -e "${CONFLICT_DIR}"/conflict.sh ]]; then
    echo 'Conflict detected. So I stopped normally. :-)'
    echo '# ---------------------------------------------' >>"${CONFLICT_DIR}"/conflict.sh
    echo "rm -f "${CONFLICT_DIR}"/conflict.sh" >>"${CONFLICT_DIR}"/conflict.sh
    echo "rm -rf "${CONFLICT_DIR}"" >>"${CONFLICT_DIR}"/conflict.sh
    exit 0
  else
    rm -rf "${CONFLICT_DIR}"
  fi
  for item in $(ls "${CUR_DIR}"); do
    if [[ -d "${item}" ]]; then
      echo "["${STOW}" start] "${item}""
      "${STOW}" -R "${item}"
    fi
  done
}

function _stow_one() {
  cd "${DOTFILES}"/.RESTORE
  # Create conflict dir
  CONFLICT_DIR=$(pwd)/assets
  if [[ ! -e ${CONFLICT_DIR} ]]; then
    mkdir -p "${CONFLICT_DIR}"
  fi
  if [[ -e "${CONFLICT_DIR}"/conflict.sh ]]; then
    rm "${CONFLICT_DIR}"/conflict.sh
  fi
  # jump to `~/.dotfiles` dir
  cd ..
  CUR_DIR=$(pwd)
  TEMP_DIR=''
  # remove previous links by "${STOW}"
  # if [[ "$1" != "${SOFT}" ]]; then
  # for item in $(ls "${CUR_DIR}"); do
  thing="$1"
  if [[ -d "${CUR_DIR}"/"${thing}" ]]; then
    echo "["${STOW}" clear] "${thing}""
    "${STOW}" -D "${thing}"
  else
    echo "This tag doesn't exist. Are you spell correctly?"
    rm -rf "${CONFLICT_DIR}"
    exit 1
  fi
  # done
  # fi
  # for thing in $(ls "${CUR_DIR}"); do
  if [[ -d "${CUR_DIR}"/"${thing}" ]]; then
    TEMP_DIR="${thing}"
    _my_traverse "${CUR_DIR}"/"${thing}"
  fi
  # done
  if [[ -e "${CONFLICT_DIR}"/conflict.sh ]]; then
    echo 'Conflict detected. So I stopped normally. :-)'
    echo '# ---------------------------------------------' >>"${CONFLICT_DIR}"/conflict.sh
    echo "rm -f "${CONFLICT_DIR}"/conflict.sh" >>"${CONFLICT_DIR}"/conflict.sh
    echo "rm -rf "${CONFLICT_DIR}"" >>"${CONFLICT_DIR}"/conflict.sh
    exit 0
  else
    rm -rf "${CONFLICT_DIR}"
  fi
  # for thing in $(ls "${CUR_DIR}"); do
  if [[ -d "${CUR_DIR}"/"${thing}" ]]; then
    echo "["${STOW}" start] "${thing}""
    "${STOW}" -R "${thing}"
  fi
  # done
}

if [[ -z "$1" ]]; then
  # echo "YSL: 1"
  _stow_all
# elif [[ "$1" -eq "${SOFT}" ]]; then
#   echo "YSL: 2"
#   _stow_all "$@"
else
  # echo "YSL: 3"
  _stow_one "$@"
fi
